{"version":3,"sources":["graphql/Queries.js","components/search.js","App.js","reportWebVitals.js","index.js"],"names":["GET_WEATHER_QUERY","gql","k","Search","useState","citySearched","setCitySearched","useLazyQuery","variables","name","getWeather","data","error","className","type","placeholder","onChange","event","target","value","preventDefault","onClick","getCityByName","weather","temperature","actual","toFixed","summary","description","wind","speed","x","y","min","max","layout","width","height","title","values","clouds","humidity","labels","App","client","ApolloClient","cache","InMemoryCache","uri","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAEaA,EAAoBC,cAAH,ygB,gCCK1BC,EAAI,GAsGOC,EArGA,WACb,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,EAAsCC,uBAAaP,EAAmB,CACpEQ,UAAW,CAAEC,KAAMJ,KADrB,mBAAOK,EAAP,YAAqBC,EAArB,EAAqBA,KAIrB,OAJA,EAA2BC,MAIT,8CAOhB,cAAC,WAAD,UACE,sBAAKC,UAAU,UAAf,UACE,oBAAIA,UAAU,UAAd,qBACA,sBAAKA,UAAU,cAAf,UACE,uBACEA,UAAU,aACVC,KAAK,OACLC,YAAY,eACZC,SAAU,SAACC,GACTf,EAAIe,EAAMC,OAAOC,MACjBF,EAAMG,oBAGV,yBACEP,UAAU,WACVQ,QAAS,WACPf,EAAgBJ,GAChBQ,KAJJ,UAOG,IAPH,eAWF,qBAAKG,UAAU,UAAf,SACGF,GACC,qCACE,qBAAIE,UAAU,YAAd,cAA4BF,EAAKW,cAAcb,KAA/C,OACA,qBAAII,UAAU,YAAd,UACG,IADH,QAEQ,KACJF,EAAKW,cAAcC,QAAQC,YAAYC,OAAS,KAAKC,QACrD,GACC,IALL,WAQA,sBAAKb,UAAU,aAAf,UACE,mBAAGA,UAAU,mBAAb,SACGF,EAAKW,cAAcC,QAAQI,QAAQC,cAEtC,oBAAGf,UAAU,YAAb,yBACeF,EAAKW,cAAcC,QAAQM,KAAKC,MAD/C,cAIF,sBAAKjB,UAAU,SAAf,UACE,cAAC,IAAD,CACEA,UAAU,aACVF,KAAM,CACJ,CACEG,KAAM,MACNiB,EAAG,CAAC,cAAe,WAAY,YAC/BC,EAAG,CACDrB,EAAKW,cAAcC,QAAQC,YAAYC,OAAS,IAChDd,EAAKW,cAAcC,QAAQC,YAAYS,IAAM,IAC7CtB,EAAKW,cAAcC,QAAQC,YAAYU,IAAM,OAInDC,OAAQ,CACNC,MAAO,IACPC,OAAQ,IACRC,MAAO,0BAGX,cAAC,IAAD,CACEzB,UAAU,iBACVF,KAAM,CACJ,CACEG,KAAM,MACNyB,OAAQ,CACN5B,EAAKW,cAAcC,QAAQiB,OAAOC,SAClC,IAAM9B,EAAKW,cAAcC,QAAQiB,OAAOC,UAE1CC,OAAQ,CAAC,WAAY,SAGzBP,OAAQ,CAAEC,MAAO,IAAKC,OAAQ,IAAKC,MAAO,4BC9E7CK,MAff,WACE,IAAMC,EAAS,IAAIC,eAAa,CAC9BC,MAAO,IAAIC,gBACXC,IAAK,+CAGP,OACE,mCACE,cAAC,iBAAD,CAAgBJ,OAAQA,EAAxB,SACE,cAAC,EAAD,SCFOK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAG1Bb,M","file":"static/js/main.929664a4.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\r\n\r\nexport const GET_WEATHER_QUERY = gql`\r\n  query getCityByName($name: String!) {\r\n    getCityByName(name: $name) {\r\n      name\r\n      country\r\n      weather {\r\n        summary {\r\n          title\r\n          description\r\n          icon\r\n        }\r\n        temperature {\r\n          actual\r\n          feelsLike\r\n          min\r\n          max\r\n        }\r\n        wind {\r\n          speed\r\n          deg\r\n        }\r\n        clouds {\r\n          all\r\n          visibility\r\n          humidity\r\n        }\r\n        timestamp\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React, { Fragment, useState } from 'react';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { GET_WEATHER_QUERY } from '../graphql/Queries';\r\nimport Plot from 'react-plotly.js';\r\n\r\nimport './style.css';\r\n\r\nvar k = '';\r\nconst Search = () => {\r\n  const [citySearched, setCitySearched] = useState('');\r\n\r\n  const [getWeather, { data, error }] = useLazyQuery(GET_WEATHER_QUERY, {\r\n    variables: { name: citySearched },\r\n  });\r\n\r\n  if (error) return <h1> Error found</h1>;\r\n\r\n  if (data) {\r\n    // console.log(data);\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='wrapper'>\r\n        <h3 className='heading'>Weather</h3>\r\n        <div className='search-area'>\r\n          <input\r\n            className='input-city'\r\n            type='text'\r\n            placeholder='City name...'\r\n            onChange={(event) => {\r\n              k = event.target.value;\r\n              event.preventDefault();\r\n            }}\r\n          />\r\n          <button\r\n            className='btn-city'\r\n            onClick={() => {\r\n              setCitySearched(k);\r\n              getWeather();\r\n            }}\r\n          >\r\n            {' '}\r\n            Search\r\n          </button>\r\n        </div>\r\n        <div className='weather'>\r\n          {data && (\r\n            <>\r\n              <h1 className='city-name'> {data.getCityByName.name} </h1>\r\n              <h4 className='city-temp'>\r\n                {' '}\r\n                Temp:{' '}\r\n                {(data.getCityByName.weather.temperature.actual - 273).toFixed(\r\n                  2\r\n                )}{' '}\r\n                Â°C\r\n              </h4>\r\n              <div className='wind-speed'>\r\n                <p className='city-description'>\r\n                  {data.getCityByName.weather.summary.description}\r\n                </p>\r\n                <p className='city-wind'>\r\n                  Wind Speed: {data.getCityByName.weather.wind.speed} kmph\r\n                </p>\r\n              </div>\r\n              <div className='charts'>\r\n                <Plot\r\n                  className='chart-temp'\r\n                  data={[\r\n                    {\r\n                      type: 'bar',\r\n                      x: ['Actual Temp', 'Min Temp', 'Max Temp'],\r\n                      y: [\r\n                        data.getCityByName.weather.temperature.actual - 273,\r\n                        data.getCityByName.weather.temperature.min - 273,\r\n                        data.getCityByName.weather.temperature.max - 273,\r\n                      ],\r\n                    },\r\n                  ]}\r\n                  layout={{\r\n                    width: 420,\r\n                    height: 340,\r\n                    title: 'Temperature(Celsius)',\r\n                  }}\r\n                />\r\n                <Plot\r\n                  className='chart-humidity'\r\n                  data={[\r\n                    {\r\n                      type: 'pie',\r\n                      values: [\r\n                        data.getCityByName.weather.clouds.humidity,\r\n                        100 - data.getCityByName.weather.clouds.humidity,\r\n                      ],\r\n                      labels: ['Humidity', 'Air'],\r\n                    },\r\n                  ]}\r\n                  layout={{ width: 420, height: 340, title: 'Humidity' }}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import './App.css';\r\nimport React from 'react';\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\r\nimport Search from './components/search';\r\n\r\nfunction App() {\r\n  const client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    uri: 'https://graphql-weather-api.herokuapp.com/',\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <ApolloProvider client={client}>\r\n        <Search />\r\n      </ApolloProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}